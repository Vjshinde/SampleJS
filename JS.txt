
const App =()=>
{
    const [disabled, setdisabled] = useState();
    const [valueArray, setvalueArray] = useState([]);
    const [selectedLanguage, setSelectedLanguage] = useState([]);

constructor() 
{
addNewEle = false;
index = 0; 
}

const afterAnimationComplete = () => 
{
index += 1; 
setdisabled(false); 
}

const addMore = () => 
{
addNewEle = true;

const newlyAddedValue = 
{
    id: "id_" + index,
    text: index + 1 
};

setdisabled(true); 
setvalueArray([...valueArray, newlyAddedValue]);

setSelectedLanguage([...selectedLanguage, newlyAddedValue]);

}

  addNewItem = (val,i,ind) => {

    let markers = [...selectedLanguage];
    let index = markers.findIndex(el => el.name === 'name');
    markers[index] = {...markers[index], key: val};
    setSelectedLanguage(markers);

  };

 
return ( 
<View style={styles.container}> 
<ScrollView ref={scrollView => scrollView = scrollView} onContentSizeChange={()=> { 
addNewEle && scrollView.scrollToEnd(); 
}} > 
<View style={{ flex: 1, padding: 4 }}>

{valueArray.map(function(item, i){
    var il = i;
    return <Picker
    selectedValue={selectedLanguage}
    onValueChange={(itemValue, itemIndex) =>addNewItem([...selectedLanguage,i,itemValue])}>
  <Picker.Item label="Java" value="java" />
  <Picker.Item label="JavaScript" value="js" />
  <Picker.Item label="Php" value="Php" />
  <Picker.Item label="Jquery" value="Jquery" />
  <Picker.Item label="Python" value="Python" />
  <Picker.Item label="Ajax" value="Ajax" />
</Picker>;
})} 
</View> 
</ScrollView>
<TouchableOpacity activeOpacity={0.8} style={styles.btn} onPress={addMore} > 
<Text>Add</Text>
</TouchableOpacity> 
</View> 
);
 } 

export default App
